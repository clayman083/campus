---
name: Base Rust app CI

on:
  workflow_call:
    inputs:
      package:
        required: true
        type: string
        description: "Package name"
      image_name:
        required: true
        type: string
        description: "Docker image name"
      registry:
        required: true
        type: string
        description: "Docker registry name"
      workdir:
        required: true
        type: string
        description: "From which folder this pipeline executes"
      install-packages:
        description: "Space seperated list of packages to install using apt-get."
        default: ""
        type: string
      # To avoid being billed 360 minutes if a step does not terminate
      # (we've seen the setup-python step below do so!)
      ci-timeout:
        description: "The timeout of the ci job. Default is 25min"
        default: 25
        type: number

jobs:
  format:
    name: Check with rustfmt formatter
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      # Ensure rustfmt is installed and setup problem matcher
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - name: Rustfmt Check
        run: cargo fmt --check -p ${{ inputs.package }}

  build:
    name: Build Docker image
    needs: [format]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry }}/${{ inputs.image_name }}
          tags: |
            # branch event
            type=ref,event=branch
            # tag event
            type=ref,event=tag
            # master event
            type=sha,format=short,prefix=,suffix=,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.workdir }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
